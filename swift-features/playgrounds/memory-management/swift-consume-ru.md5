Подсчет ссылок и Copy-On-Write, при работе с переменными семантики значений (values), автоматически определяют как выделятся и высвобждается память. В новых версиях языка появилась возможность вручную изменять это поведение для достижения лучшего перформанса.

Ввели оператор consume, который завершает время существования (lifetime) переменной (т. е. "отвязывает" имя от выделенной памяти) и позволяет передать владение ею (forward ownership) другой переменной или аргументу функции.
Например,

```
func useUniquely(_ value: consuming [Int]) {
	var y = consume value // Передача владения из value в y

	y.append(4) // Без consume произошло бы излишнее копирование из value (согласно COW)
}

let x = [1, 2, 3]
useUniquely(consume x) // "Отвязать" переменную x от [1, 2, 3] и передать во владение аргументу value в useUniquely.

// Здесь при попытке po x выведется "error: cannot find 'x' in scope"

let y = x // Ошибка компилятора "x used after consume".
```

https://github.com/swiftlang/swift-evolution/blob/main/proposals/0366-move-function.md

Также ввели некопируемые структуры и перечисления (~Copyable) о которых напишу далее.
